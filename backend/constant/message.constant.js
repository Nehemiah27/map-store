export const userResponses = {
    DEFAULT_USER_SUCCESS: "Default User set successfully",
    USER_CREATE_SUCCESS: "User Created Successfully",
    PASSWORD_CHANGE_SUCCESS: "Password changed successfully",
  },
  authResponses = {
    AUTH_SUCCESS: "User Authenticated Successfully",
    LOGOUT_SUCCESS: "User Logged out successfully",
  },
  mapTitleRespones = {
    TITLE_UNIQUE: "Title is unique",
  },
  mapRespones = {
    CAPTURE_SUCCESS: "Map Captured Successfully",
  },
  mapEditRespones = {
    MAP_EDIT_SUCCESS: "Map Edited Successfully",
  },
  mapDeleteReponses = {
    MAP_DELETE_SUCCESS: "Map Deleted Succesfully",
  },
  mapHomeResponses = {
    MAP_FETCH: "Map fetched successfully",
  },
  topMapResponses = {
    FREQUENT_FETCH: "Top three maps fetched succesfully",
  },
  cuboidResponses = {
    MAP_FETCH_SUCCESS: "Map Fetched sucessfully",
  },
  noteEditResponses = {
    ANNOTATION_EDIT_SUCCESS: "Annotation edited successfully",
  },
  mapSearchResponses = {
    RESULTS_FETCH: "Results fetched successfully",
  },
  userSearchResponses = {
    RESULTS_FETCH: "Users fetched successfully",
  },
  fullViewRespones = {
    MAP_FETCH_SUCCESS: "Map Fetched successfully",
  },
  authErrors = {
    AUTH_ERROR: "Server is allocated at the moment",
    USER_NOT_FOUND: "User not found with the email given",
    USER_PENDING: "User hasn't set his password yet",
    INVALID_PASSWORD: "Incorrect password provided",
    EMAIL_REQUIRED: "User Email is required",
    EMAIL_INVALID: "User Email format is not as per the standard",
    EMAIL_EMPTY: "User Email should not be empty",
    EMAIL_STRING: "User Email must be a string",
    PASSWORD_EMPTY: "User Password should not be empty",
    PASSWORD_STRING: "User Password must be a string",
    PASSWORD_REQUIRED: "User Password is required",
    INVALID_TOKEN: "Unauthorized on grounds of Invalid token",
  },
  userErrors = {
    DEFAULTS_ALREADY_CONFIGURED: "Default User Configured already",
    DUPLICATE_USER: "Duplicate User found to create",
    PASSWORD_REQUIRED: "User Password is required",
    PASSWORD_INVALID: "User Password is not as per the standard",
    PASSWORD_EMPTY: "User Password should not be empty",
    PASSWORD_STRING: "User Password must be a string",
    EMAIL_REQUIRED: "User Email is required",
    EMAIL_INVALID: "User Email format is not as per the standard",
    EMAIL_EMPTY: "User Email should not be empty",
    EMAIL_STRING: "User Email must be a string",
    FIRST_NAME_REQUIRED: "User first name is required",
    FIRST_NAME_EMTPY: "User first name should not be empty",
    FIRST_NAME_STRING: "User first name must be a string",
    LAST_NAME_STRING: "User last name must be a string",
  },
  mapCaptureErrors = {
    USERID_REQUIRED: "User ID is required",
    USERID_STRING: "User ID must be a string",
    USERID_EMPTY: "User ID should not be empty",
    LAT_REQUIRED: "Latitude is required",
    LAT_STRING: "Latitude must be a string",
    LAT_EMPTY: "Latitude should not be empty",
    LNG_REQUIRED: "Longitude is required",
    LNG_STRING: "Longitude must be a string",
    LNG_EMPTY: "Longitude should not be empty",
    ZOOM_REQUIRED: "Zoom is required",
    ZOOM_STRING: "Zoom must be a string",
    ZOOM_EMPTY: "Zoom should not be empty",
    TITLE_REQUIRED: "Map Title is required",
    TITLE_STRING: "Map Title must be a string",
    TITLE_EMPTY: "Map Title should not be empty",
    NOTES_REQUIRED: "Map Annotation is required",
    NOTES_STRING: "Map Annotation must be a string",
    MAP_IMAGE_REQUIRED: "Map Image is required",
    MAP_IMAGE_STRING: "Map Image must be a string",
    MAP_IMAGE_EMPTY: "Map Image should not be empty",
    DUPLICATE_TITLE: "Another Map with same title is found",
    MAP_ERROR: "Server is allocated at the moment",
  },
  mapEditErrors = {
    USERID_REQUIRED: "User ID is required",
    USERID_STRING: "User ID must be a string",
    USERID_EMPTY: "User ID should not be empty",
    MAPID_REQUIRED: "Map ID is required",
    MAPID_STRING: "Map ID must be a string",
    MAPID_EMPTY: "Map ID should not be empty",
    LAT_REQUIRED: "Latitude is required",
    LAT_STRING: "Latitude must be a string",
    LAT_EMPTY: "Latitude should not be empty",
    LNG_REQUIRED: "Longitude is required",
    LNG_STRING: "Longitude must be a string",
    LNG_EMPTY: "Longitude should not be empty",
    ZOOM_REQUIRED: "Zoom is required",
    ZOOM_STRING: "Zoom must be a string",
    ZOOM_EMPTY: "Zoom should not be empty",
    TITLE_REQUIRED: "Map Title is required",
    TITLE_STRING: "Map Title must be a string",
    TITLE_EMPTY: "Map Title should not be empty",
    NOTES_REQUIRED: "Map Annotation is required",
    NOTES_STRING: "Map Annotation must be a string",
    MAP_IMAGE_REQUIRED: "Map Image is required",
    MAP_IMAGE_STRING: "Map Image must be a string",
    MAP_IMAGE_EMPTY: "Map Image should not be empty",
    DUPLICATE_TITLE: "Another Map with same title is found",
    MAP_ERROR: "Server is allocated at the moment",
  },
  mapDeleteErrors = {
    MAPID_REQUIRED: "Map ID is required",
    MAPID_STRING: "Map ID must be a string",
    MAPID_EMPTY: "Map ID should not be empty",
    MAP_ERROR: "Server is allocated at the moment",
  },
  mapHomeErrors = {
    USERID_REQUIRED: "User ID is required",
    USERID_STRING: "User ID must be a string",
    USERID_EMPTY: "User ID should not be empty",
  },
  topMapErrors = {
    MAP_ERROR: "Server is allocated at the moment",
  },
  cuboidErrors = {
    MAPID_REQUIRED: "Map ID is required",
    MAPID_STRING: "Map ID must be a string",
    MAPID_EMPTY: "Map ID should not be empty",
    MAP_ERROR: "Server is allocated at the moment",
    MAP_NOT_FOUND: "Map not found for the given Map ID",
  },
  fullMapErrors = {
    MAPID_REQUIRED: "Map ID is required",
    MAPID_STRING: "Map ID must be a string",
    MAPID_EMPTY: "Map ID should not be empty",
    MAP_ERROR: "Server is allocated at the moment",
    MAP_NOT_FOUND: "Map not found for the given Map ID",
  },
  noteEditErrors = {
    MAP_NOT_FOUND: "Map not found for the given Map ID",
    MAP_ERROR: "Server is allocated at the moment",
    MAPID_REQUIRED: "Map ID is required",
    MAPID_STRING: "Map ID must be a string",
    MAPID_EMPTY: "Map ID should not be empty",
    TITLE_REQUIRED: "Map Title is required",
    TITLE_STRING: "Map Title must be a string",
    TITLE_EMPTY: "Map Title should not be empty",
    NOTES_REQUIRED: "Map Annotation is required",
    NOTES_STRING: "Map Annotation must be a string",
    DUPLICATE_TITLE: "Another Map with same title is found",
  },
  mapSearchErrors = {
    CURRENT_PAGE_REQUIRED: "Current page number is required",
    CURRENT_PAGE_AS_NUMBER: "Current page must be a number",
    CURRENT_PAGE_VALIDATION: "Current page must be greater than 0",
    PER_PAGE_RECORD_REQUIRED: "Total records per page is required",
    PER_PAGE_RECORD_AS_NUMBER: "Total records per page must be a number",
    PER_PAGE_RECORD_VALIDATION: "Total records per page must be a number",
    SEARCH_TEXT_REQUIRED: "Search Text is required",
    SEARCH_TEXT_AS_STRING: "Search Text must be a string",
    MAP_ERROR: "Server is allocated at the moment",
  },
  userSearchErrors = {
    CURRENT_PAGE_REQUIRED: "Current page number is required",
    CURRENT_PAGE_AS_NUMBER: "Current page must be a number",
    CURRENT_PAGE_VALIDATION: "Current page must be greater than 0",
    PER_PAGE_RECORD_REQUIRED: "Total records per page is required",
    PER_PAGE_RECORD_AS_NUMBER: "Total records per page must be a number",
    PER_PAGE_RECORD_VALIDATION: "Total records per page must be a number",
    SEARCH_TEXT_REQUIRED: "Search Text is required",
    SEARCH_TEXT_AS_STRING: "Search Text must be a string",
    USERS_ERROR: "Server is allocated at the moment",
  },
  mapTitleErrors = {
    USERID_REQUIRED: "User ID is required",
    USERID_STRING: "User ID must be a string",
    USERID_EMPTY: "User ID should not be empty",
    TITLE_REQUIRED: "Map Title is required",
    TITLE_STRING: "Map Title must be a string",
    TITLE_EMPTY: "Map Title should not be empty",
    DUPLICATE_TITLE: "Title is already taken by you for some other maps",
  },
  passwordChangeErrors = {
    OLD_PASSWORD_EMPTY: "Old Password should not be empty",
    OLD_PASSWORD_STRING: "Old Password must be a string",
    OLD_PASSWORD_REQUIRED: "UOld Password is required",
    OLD_PASSWORD_INVALID: "Old Password is not as per the standard",
    NEW_PASSWORD_EMPTY: "New Password should not be empty",
    NEW_PASSWORD_STRING: "New Password must be a string",
    NEW_PASSWORD_REQUIRED: "New Password is required",
    NEW_PASSWORD_INVALID: "New Password is not as per the standard",
    USERID_REQUIRED: "User ID is required",
    USERID_STRING: "User ID must be a string",
    USERID_EMPTY: "User ID should not be empty",
    INVALID_TOKEN: "Unauthorized on grounds of Invalid token",
    INVALID_OLD_PASSWORD: "Invalid old password",
    USER_NOT_FOUND: "User not found with the email given",
    PASSWORD_CHANGE_ERROR: "Server is allocated at the moment",
  },
  envErrors = {
    PORT_REQUIRED: "Node JS hosting port is required",
    PORT_MUST_BE_NUMBER: "Node JS hosting port must be a number",
    MONGODB_URL_REQUIRED: "Couldn't find mongoDB URL",
    MONGODB_URL_MUST_BE_STRING: "MongoDB URL must be a type of string",
    MONGODB_URL_EMPTY: "MongoDB URL should not be empty",
    JWT_SECRET_REQUIRED: "Couldn't find mongoDB URL",
    JWT_SECRET_MUST_BE_STRING: "MongoDB URL must be a type of string",
    JWT_SECRET_EMPTY: "MongoDB URL should not be empty",
    REDIS_URL_REQUIRED: "Couldn't find redis URL",
    REDIS_URL_EMPTY: "Redis URL should not be empty",
    REDIS_PORT_REQUIRED: "Couldn't find redis port",
    REDIS_TTL_REQUIRED: "Couldn't find time to live value",
  },
  serverErrors = {
    INTERNAL_SERVER_ERROR: "Something went wrong",
    ERROR_HASHING_PASSWORD: "Error hashing password",
    ERROR_HASH_COMPARE: "Error comparing passwords",
  };
